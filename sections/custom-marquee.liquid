{% comment %}  Infinite Marquee Section for Shopify  File: sections/infinite-marquee.liquid {% endcomment %}
<style>
  #marquee-{{ section.id }} {
    --marquee-bg: {{ section.settings.background_color }};
    --marquee-text: {{ section.settings.text_color }};
    --marquee-link: {{ section.settings.link_color }};
    --marquee-link-hover: {{ section.settings.link_hover_color }};
    --marquee-separator: {{ section.settings.separator_color }};
    --marquee-padding-top: {{ section.settings.padding_top }}px;
    --marquee-padding-bottom: {{ section.settings.padding_bottom }}px;
    --marquee-speed: {{ section.settings.animation_speed }}s;
  }

  #marquee-{{ section.id }} * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  #marquee-{{ section.id }} .marquee-container {
    background: var(--marquee-bg);
    overflow: hidden;
    white-space: nowrap;
    position: relative;
    width: 100%;
    padding-top: var(--marquee-padding-top);
    padding-bottom: var(--marquee-padding-bottom);
  }

  /* JS-driven: the track will be translated with rAF, no CSS keyframes */
  #marquee-{{ section.id }} .marquee-track {
    display: flex;
    align-items: center;
    will-change: transform;
  }

  /* Weâ€™ll convert items + separators into "units" so we can recycle them */
  #marquee-{{ section.id }} .marquee-unit {
    display: inline-flex;
    align-items: center;
    flex-shrink: 0;
    padding-right: 40px;
  }

  #marquee-{{ section.id }} .marquee-item {
    color: var(--marquee-text);
    font-size: {{ section.settings.font_size }}px;
    font-weight: {{ section.settings.font_weight }};
    letter-spacing: 0.3px;
    display: inline-flex;
    align-items: center;
    white-space: nowrap;
    padding: 0 {{ section.settings.item_spacing }}px;
  }

  #marquee-{{ section.id }} .separator {
    display: inline-flex;
    align-items: center;
    padding: 0 {{ section.settings.separator_spacing }}px;
  }

  #marquee-{{ section.id }} .separator-icon {
    color: var(--marquee-separator);
    font-size: {{ section.settings.separator_icon_size }}px;
  }

  #marquee-{{ section.id }} .separator-image {
    width: {{ section.settings.separator_image_width }}px;
    height: auto;
    display: block;
  }

  #marquee-{{ section.id }} .marquee-link {
    color: var(--marquee-link);
    text-decoration: {{ section.settings.link_underline }};
    text-underline-offset: 3px;
    cursor: pointer;
    transition: color 0.3s ease;
    margin-left: 5px;
  }
  #marquee-{{ section.id }} .marquee-link:hover {
    color: var(--marquee-link-hover);
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    #marquee-{{ section.id }} .marquee-item {
      font-size: {{ section.settings.font_size_mobile }}px;
      padding: 0 {{ section.settings.item_spacing | divided_by: 1.5 }}px;
    }
    #marquee-{{ section.id }} .separator {
      padding: 0 {{ section.settings.separator_spacing | divided_by: 1.5 }}px;
    }
    #marquee-{{ section.id }} .separator-icon {
      font-size: {{ section.settings.separator_icon_size | minus: 2 }}px;
    }
    #marquee-{{ section.id }} .separator-image {
      width: {{ section.settings.separator_image_width | times: 0.8 }}px;
    }
  }
  @media (max-width: 480px) {
    #marquee-{{ section.id }} .marquee-item {
      font-size: {{ section.settings.font_size_mobile | minus: 1 }}px;
      padding: 0 {{ section.settings.item_spacing | divided_by: 2 }}px;
    }
    #marquee-{{ section.id }} .separator {
      padding: 0 {{ section.settings.separator_spacing | divided_by: 2 }}px;
    }
  }
</style>

<div
  id="marquee-{{ section.id }}"
  data-pause-on-hover="{{ section.settings.pause_on_hover }}"
  data-auto-speed="{{ section.settings.auto_speed }}"
  data-pps="{{ section.settings.pixels_per_second }}"
  data-duration="{{ section.settings.animation_speed }}"
>
  <div class="marquee-container">
    <div class="marquee-track">
      <div class="marquee-source" aria-hidden="true" style="display: inline-flex; align-items: center;">
        {% for block in section.blocks %}
          {% if block.type == 'text_item' %}
            <span class="marquee-item">
              {{ block.settings.text }}
              {% if block.settings.link_text != blank and block.settings.link_url != blank %}
                <a href="{{ block.settings.link_url }}" class="marquee-link">{{ block.settings.link_text }}</a>
              {% endif %}
            </span>
            {% unless forloop.last %}
              <span class="separator">
                {% if section.settings.separator_type == 'image' and section.settings.separator_image != blank %}
                  <img
                    src="{{ section.settings.separator_image | image_url: width: 800, height: 800, crop: 'center' }}"
                    alt="Separator"
                    class="separator-image"
                    loading="lazy"
                    width="800"
                    height="800"
                  >
                {% endif %}
              </span>
            {% endunless %}
          {% endif %}
        {% endfor %}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const section = document.getElementById('marquee-{{ section.id }}');
    if (!section || section.dataset.initialized === 'true') return;
    section.dataset.initialized = 'true';

    const container = section.querySelector('.marquee-container');
    const track = section.querySelector('.marquee-track');
    const source = section.querySelector('.marquee-source');

    if (!container || !track || !source) return;

    const pauseOnHover = section.getAttribute('data-pause-on-hover') === 'true';
    const autoSpeed = section.getAttribute('data-auto-speed') === 'true';
    const ppsSetting = parseFloat(section.getAttribute('data-pps')) || 20; // pixels per second
    const durationSetting = parseFloat(section.getAttribute('data-duration')) || 40; // seconds
    const prefersReducedMotion = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    let offset = 0;
    let velocity = 30; // default fallback
    let rafId = null;
    let lastTs = performance.now();
    let paused = false;

    // Turn "item + (optional) separator" into a single movable unit
    function buildUnitsFromSource() {
      const nodes = Array.from(source.childNodes).filter((n) => n.nodeType === 1); // Elements only
      const units = [];
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (node.classList.contains('marquee-item')) {
          const unit = document.createElement('span');
          unit.className = 'marquee-unit';
          unit.appendChild(node.cloneNode(true));
          // If next sibling is a separator, include it in the same unit.
          const next = nodes[i + 1];
          if (next && next.classList && next.classList.contains('separator')) {
            unit.appendChild(next.cloneNode(true));
            i++; // skip next
          }
          units.push(unit);
        }
      }
      return units;
    }

    function clearTrack() {
      while (track.firstChild) track.removeChild(track.firstChild);
    }

    function fillBuffer(units) {
      // Ensure at least ~2x container width of content so we can scroll smoothly
      const fragment = document.createDocumentFragment();
      units.forEach((u) => fragment.appendChild(u.cloneNode(true)));
      clearTrack();
      track.appendChild(fragment);

      // Keep cloning until we exceed 2x container width
      let safety = 0;
      while (track.scrollWidth < container.clientWidth * 2 && safety < 50) {
        const more = Array.from(track.children).map((el) => el.cloneNode(true));
        more.forEach((el) => track.appendChild(el));
        safety++;
      }
    }

    function computeVelocity() {
      if (autoSpeed) {
        // Use pixels-per-second directly (setting already represents speed)
        velocity = ppsSetting > 0 ? ppsSetting : 20;
      } else {
        // Derive pixels-per-second from desired duration for one full cycle of the initial units
        const width = track.scrollWidth || container.clientWidth;
        velocity = width > 0 && durationSetting > 0 ? width / durationSetting : 30;
      }
    }

    function onFrame(ts) {
      const dt = (ts - lastTs) / 1000;
      lastTs = ts;
      if (!paused) {
        offset -= velocity * dt;

        // Recycle units that fully left the viewport
        let first = track.firstElementChild;
        while (first && offset <= -first.offsetWidth) {
          offset += first.offsetWidth;
          track.appendChild(first);
          first = track.firstElementChild;
        }

        track.style.transform = 'translateX(' + offset + 'px)';
      }
      rafId = requestAnimationFrame(onFrame);
    }

    function start() {
      if (prefersReducedMotion) return; // Respect user preference
      cancelAnimationFrame(rafId);
      offset = 0;
      lastTs = performance.now();
      computeVelocity();
      rafId = requestAnimationFrame(onFrame);
    }

    function stop() {
      cancelAnimationFrame(rafId);
      rafId = null;
    }

    // Initialize
    const initialUnits = buildUnitsFromSource();
    fillBuffer(initialUnits);
    start();

    // Pause on hover support (if enabled)
    if (pauseOnHover) {
      container.addEventListener('mouseenter', () => {
        paused = true;
      });
      container.addEventListener('mouseleave', () => {
        paused = false;
      });
    }

    // Recalculate on resize
    let resizeRaf;
    const handleResize = () => {
      if (resizeRaf) cancelAnimationFrame(resizeRaf);
      resizeRaf = requestAnimationFrame(() => {
        const units = buildUnitsFromSource();
        fillBuffer(units);
        start();
      });
    };
    window.addEventListener('resize', handleResize);

    // Cleanup on section removal (Shopify editor safety)
    document.addEventListener('shopify:section:unload', function (event) {
      if (event.detail && event.detail.sectionId === '{{ section.id }}') {
        stop();
        window.removeEventListener('resize', handleResize);
      }
    });
  });
</script>

{% schema %}
{
  "name": "Marquee",
  "tag": "section",
  "class": "infinite-marquee-section",
  "settings": [
    { "type": "header", "content": "Design Settings" },
    { "type": "color", "id": "background_color", "label": "Background Color", "default": "#1a3a52" },
    { "type": "color", "id": "text_color", "label": "Text Color", "default": "#ffffff" },
    { "type": "color", "id": "link_color", "label": "Link Color", "default": "#ffffff" },
    { "type": "color", "id": "link_hover_color", "label": "Link Hover Color", "default": "#64b5f6" },

    { "type": "header", "content": "Spacing & Padding" },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Top Padding",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 12
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Bottom Padding",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 12
    },
    {
      "type": "range",
      "id": "item_spacing",
      "label": "Item Spacing",
      "min": 5,
      "max": 50,
      "step": 1,
      "unit": "px",
      "default": 20
    },

    { "type": "header", "content": "Typography" },
    {
      "type": "range",
      "id": "font_size",
      "label": "Font Size (Desktop)",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "default": 15
    },
    {
      "type": "range",
      "id": "font_size_mobile",
      "label": "Font Size (Mobile)",
      "min": 10,
      "max": 20,
      "step": 1,
      "unit": "px",
      "default": 13
    },
    {
      "type": "select",
      "id": "font_weight",
      "label": "Font Weight",
      "default": "500",
      "options": [
        { "value": "300", "label": "Light" },
        { "value": "400", "label": "Regular" },
        { "value": "500", "label": "Medium" },
        { "value": "600", "label": "Semibold" },
        { "value": "700", "label": "Bold" }
      ]
    },
    {
      "type": "select",
      "id": "link_underline",
      "label": "Link Underline",
      "default": "underline",
      "options": [
        { "value": "none", "label": "None" },
        { "value": "underline", "label": "Underline" }
      ]
    },

    { "type": "header", "content": "Separator Settings" },
    {
      "type": "select",
      "id": "separator_type",
      "label": "Separator Type",
      "default": "none",
      "options": [
        { "value": "none", "label": "None" },
        { "value": "image", "label": "Image" }
      ]
    },
    {
      "type": "image_picker",
      "id": "separator_image",
      "label": "Separator Image",
      "info": "Used when separator type is set to Image"
    },
    {
      "type": "range",
      "id": "separator_icon_size",
      "label": "Separator Icon Size",
      "min": 6,
      "max": 20,
      "step": 1,
      "unit": "px",
      "default": 8
    },
    {
      "type": "range",
      "id": "separator_image_width",
      "label": "Separator Image Width",
      "min": 10,
      "max": 50,
      "step": 1,
      "unit": "px",
      "default": 20
    },
    { "type": "color", "id": "separator_color", "label": "Separator Color", "default": "#64b5f6" },
    {
      "type": "range",
      "id": "separator_spacing",
      "label": "Separator Spacing",
      "min": 5,
      "max": 40,
      "step": 1,
      "unit": "px",
      "default": 20
    },

    { "type": "header", "content": "Animation Settings" },
    {
      "type": "range",
      "id": "animation_speed",
      "label": "Animation Duration",
      "min": 10,
      "max": 100,
      "step": 1,
      "unit": "s",
      "default": 40,
      "info": "Time in seconds for one complete scroll (used when Auto-adjust is off)"
    },
    {
      "type": "checkbox",
      "id": "auto_speed",
      "label": "Auto-adjust Speed",
      "default": true,
      "info": "Use Scroll Speed (pixels/second) for movement"
    },
    {
      "type": "range",
      "id": "pixels_per_second",
      "label": "Scroll Speed (pixels/second)",
      "min": 10,
      "max": 50,
      "step": 1,
      "default": 20,
      "info": "Used when Auto-adjust is enabled"
    },
    { "type": "checkbox", "id": "pause_on_hover", "label": "Pause on Hover", "default": false }
  ],
  "blocks": [
    {
      "type": "text_item",
      "name": "Announcement",
      "limit": 10,
      "settings": [
        { "type": "text", "id": "text", "label": "Text Content", "default": "Your new favorite drinking buddy!" },
        { "type": "text", "id": "link_text", "label": "Link Text (Optional)", "info": "Leave blank for no link" },
        { "type": "url", "id": "link_url", "label": "Link URL" }
      ]
    }
  ],
  "presets": [
    {
      "name": "Marquee",
      "blocks": [
        {
          "type": "text_item",
          "settings": {
            "text": "Free shipping for all US orders.",
            "link_text": "Shop Now",
            "link_url": "/collections/all"
          }
        },
        {
          "type": "text_item",
          "settings": {
            "text": "Free shipping for all US orders.",
            "link_text": "Shop Now",
            "link_url": "/collections/all"
          }
        }
      ]
    }
  ]
}
{% endschema %}
